{"version":3,"file":"main.bundle.js","mappings":";;;;;;;;;;AAAA;;;;;;;;;;;ACAA;;;;;;UCAA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;;;;;ACtBA,MAAM;EAAEA,GAAG;EAAEC,aAAa;EAAEC;AAAQ,CAAC,GAAGC,mBAAO,CAAC,0BAAU,CAAC;AAC3D,MAAMC,IAAI,GAAGD,mBAAO,CAAC,kBAAM,CAAC;AAE5B,SAASE,YAAYA,CAAA,EAAI;EACrB,MAAMC,GAAG,GAAG,IAAIL,aAAa,CAAC;IAC1BM,KAAK,EAAE,GAAG;IACVC,MAAM,EAAE,GAAG;IACXC,aAAa,EAAE,QAAQ;IACvBC,IAAI,EAAE,wBAAwB;IAC9BC,cAAc,EAAE;MACZC,OAAO,EAAEC,gGAAiCA;IAC9C;EACJ,CAAC,CAAC;EAEFP,GAAG,CAACQ,OAAO,CAACC,mCAAyB,CAAC;EAEtCC,gBAAgB,CAAC,CAAC;EAClBC,YAAY,CAAC,CAAC;EACdC,mBAAmB,CAACZ,GAAG,CAAC;EACxBa,mBAAmB,CAACb,GAAG,CAAC;EACxBc,kBAAkB,CAACd,GAAG,CAAC;EAEvBA,GAAG,CAACe,QAAQ,CAAC,YAAY,CAAC,CAACC,IAAI,CAAC,CAAC;AACrC;AAEAtB,GAAG,CAACuB,SAAS,CAAC,CAAC,CAACD,IAAI,CAAC,MAAM;EACvBjB,YAAY,CAAC,CAAC;EAEdL,GAAG,CAACwB,EAAE,CAAC,UAAU,EAAE,MAAM;IACrB,IAAIvB,aAAa,CAACwB,aAAa,CAAC,CAAC,CAACC,MAAM,KAAK,CAAC,EAAE;MAC5CrB,YAAY,CAAC,CAAC;IAClB;EACJ,CAAC,CAAC;AACN,CAAC,CAAC;AAEFL,GAAG,CAACwB,EAAE,CAAC,mBAAmB,EAAE,MAAM;EAC9B,IAAIG,OAAO,CAACC,QAAQ,KAAK,QAAQ,EAAE;IAC/B5B,GAAG,CAAC6B,IAAI,CAAC,CAAC;EACd;AACJ,CAAC,CAAC;AAEF,SAASb,gBAAgBA,CAAA,EAAG;EACxBd,OAAO,CAACsB,EAAE,CAAC,eAAe,EAAE,UAASM,KAAK,EAAE;IACxC,IAAIC,IAAI,GAAG,IAAI;IACf,IAAIJ,OAAO,CAACC,QAAQ,IAAI,OAAO,IAAID,OAAO,CAACK,IAAI,CAACN,MAAM,IAAI,CAAC,EAAE;MACzD,IAAIO,YAAY,GAAGN,OAAO,CAACK,IAAI,CAAC,CAAC,CAAC;MAClCD,IAAI,GAAGE,YAAY;IACvB;IACAH,KAAK,CAACI,WAAW,GAAGH,IAAI;EAC5B,CAAC,CAAC;AACN;AAEA,SAASd,YAAYA,CAAA,EAAG;EACpBf,OAAO,CAACiC,MAAM,CAAC,UAAU,EAAE,MAAM;IAC7BnC,GAAG,CAAC6B,IAAI,CAAC,CAAC;EACd,CAAC,CAAC;AACN;AAEA,SAASX,mBAAmBA,CAACkB,MAAM,EAAE;EACjClC,OAAO,CAACiC,MAAM,CAAC,cAAc,EAAE,MAAM;IACjCC,MAAM,CAACC,QAAQ,CAAC,CAAC;EACrB,CAAC,CAAC;AACN;AAEA,SAASlB,mBAAmBA,CAACiB,MAAM,EAAE;EACjClC,OAAO,CAACiC,MAAM,CAAC,iBAAiB,EAAE,MAAM;IACpCC,MAAM,CAACE,QAAQ,CAAC,CAAC;EACrB,CAAC,CAAC;AACN;AAEA,SAASlB,kBAAkBA,CAACgB,MAAM,EAAE;EAChClC,OAAO,CAACiC,MAAM,CAAC,gBAAgB,EAAE,MAAM;IACnCC,MAAM,CAACG,OAAO,CAAC,CAAC;EACpB,CAAC,CAAC;AACN,C","sources":["webpack://desktop-custom-player/external node-commonjs \"electron\"","webpack://desktop-custom-player/external node-commonjs \"path\"","webpack://desktop-custom-player/webpack/bootstrap","webpack://desktop-custom-player/./main.js"],"sourcesContent":["module.exports = require(\"electron\");","module.exports = require(\"path\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","const { app, BrowserWindow, ipcMain } = require('electron');\r\nconst path = require('path');\r\n\r\nfunction createWindow () {\r\n    const win = new BrowserWindow({\r\n        width: 800,\r\n        height: 600,\r\n        titleBarStyle: 'hidden',\r\n        icon: 'assets/images/icon.png',\r\n        webPreferences: {\r\n            preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY\r\n        }\r\n    });\r\n\r\n    win.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);\r\n\r\n    watchGetFileData();\r\n    watchQuitApp();\r\n    watchCollapseWindow(win);\r\n    watchMaximizeWindow(win);\r\n    watchRestoreWindow(win);\r\n\r\n    win.loadFile('index.html').then();\r\n}\r\n\r\napp.whenReady().then(() => {\r\n    createWindow()\r\n\r\n    app.on('activate', () => {\r\n        if (BrowserWindow.getAllWindows().length === 0) {\r\n            createWindow()\r\n        }\r\n    })\r\n})\r\n\r\napp.on('window-all-closed', () => {\r\n    if (process.platform !== 'darwin') {\r\n        app.quit()\r\n    }\r\n});\r\n\r\nfunction watchGetFileData() {\r\n    ipcMain.on('get-file-data', function(event) {\r\n        let data = null;\r\n        if (process.platform == 'win32' && process.argv.length >= 2) {\r\n            let openFilePath = process.argv[1];\r\n            data = openFilePath;\r\n        }\r\n        event.returnValue = data;\r\n    });\r\n}\r\n\r\nfunction watchQuitApp() {\r\n    ipcMain.handle('quit-app', () => {\r\n        app.quit();\r\n    });\r\n}\r\n\r\nfunction watchCollapseWindow(window) {\r\n    ipcMain.handle('collapse-app', () => {\r\n        window.minimize();\r\n    });\r\n}\r\n\r\nfunction watchMaximizeWindow(window) {\r\n    ipcMain.handle('maximize-window', () => {\r\n        window.maximize();\r\n    });\r\n}\r\n\r\nfunction watchRestoreWindow(window) {\r\n    ipcMain.handle('restore-window', () => {\r\n        window.restore();\r\n    });\r\n}"],"names":["app","BrowserWindow","ipcMain","require","path","createWindow","win","width","height","titleBarStyle","icon","webPreferences","preload","MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY","loadURL","MAIN_WINDOW_WEBPACK_ENTRY","watchGetFileData","watchQuitApp","watchCollapseWindow","watchMaximizeWindow","watchRestoreWindow","loadFile","then","whenReady","on","getAllWindows","length","process","platform","quit","event","data","argv","openFilePath","returnValue","handle","window","minimize","maximize","restore"],"sourceRoot":""}